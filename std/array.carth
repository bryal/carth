(import iter)
(import mem)

(define (array/length (Array _ n)) n)

(define: (array/iter (Array ptr len))
    (forall (a) (Fun (Array a) (Iter a)))
  (map (<o deref (<o (ptr/+ ptr) cast))
       (xrange 0 (cast len))))

(define: (array/collect xs) (forall (a) (Fun (Iter a) (Array a)))
  (let ((n (count xs))
        (ptr (: (transmute (id@"GC_malloc" (* (sizeof a) (cast n)))) (Box a))))
    (foldl (fun (v [i x]) (array/insert i x v))
           (Array ptr (cast n))
           (enumerate xs))))

(define: (array/insert i x (Array ptr n))
    (forall (a) (Fun Nat a (Array a) (Array a)))
  (if (>= i n)
      (panic "array/insert after end of array")
    (seq (store x (ptr/+ ptr i))
         (Array ptr n))))

(define (array/lookup i (Array ptr n))
  (if (< i n)
      (Some (deref (ptr/+ ptr i)))
    None))

(define array/lookup! (<oo unwrap! array/lookup))

;;? Returns index of the first occurence of the element in the array, if it *is* an element
(define: (array/find eq? x xs)
    (forall (a) (Fun (Fun a a Bool) a (Array a) (Maybe Nat)))
  (array/find-by (= x) xs))

;;? Returns the index of the first element that satisfies the predicate
(define (array/find-by p xs)
  (let1 i (count (take-while (<o not p) (array/iter xs)))
    (if (< i (array/length xs))
        (Some i)
      None)))
;;? Binary search
;;?
;;? If there are multiple matches, the index of any of them may be returned.
(define: (array/search cmp x ys)
    (forall (a) (Fun (Fun a a Cmp) a (Array a) (Maybe Nat)))
  (define (go start end)
    (if (= start end)
        None
      (let ((i (+ start (/ (- end start) (cast 2))))
            (y (array/lookup! i ys)))
        (match (cmp x y)
          (case Eq (Some i))
          (case Lt (go start i))
          (case Gt (go (inc i) end))))))
  (go (cast 0) (array/length ys)))
