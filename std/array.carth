(import iter)
(import mem)

(define (array/length (Array _ n)) n)

(define: (array/iter (Array ptr len))
    (forall (a) (Fun (Array a) (Iter a)))
  (map (<o deref (<o (ptr/+ ptr) cast))
       (xrange 0 (cast len))))

(define array/nil (Array mem/unsafe-null (cast 0)))

(define (array/nil? a) (= (cast 0) (array/length a)))

(define: (array/unsafe-uninit n) (forall (a) (Fun Nat (Array a)))
  (Array (cast-ptr (id@"GC_malloc" (* (sizeof a) n)))
         n))

(define: (array/collect xs) (forall (a) (Fun (Iter a) (Array a)))
  (let1 n (count xs)
    (foldl (fun (v [i x]) (array/insert i x v))
           (array/unsafe-uninit n)
           (enumerate xs))))

(define: (array/insert i x (Array ptr n))
    (forall (a) (Fun Nat a (Array a) (Array a)))
  (if (>= i n)
      (panic "array/insert after end of array")
    (seq (store x (ptr/+ ptr i))
         (Array ptr n))))

(extern memcpy (Fun (Box Nat8) (Box Nat8) Nat (Box Nat8)))

(define (memcpy' dest src count)
  (: (transmute (memcpy (transmute (: dest (Box a)))
                        (transmute (: src (Box a)))
                        (* count (sizeof a))))
     (Box a)))

(define: (array/append (Array px nx) (Array py ny))
    (forall (a) (Fun (Array a) (Array a) (Array a)))
  (let1 (Array pz nz) (array/unsafe-uninit (nat/nowrap+ nx ny))
    (apps seq
          (memcpy' pz px nx)
          (memcpy' (ptr/+ pz nx) py ny)
          (Array pz nz))))

(define (array/lookup i (Array ptr n))
  (if (< i n)
      (Some (deref (ptr/+ ptr i)))
    None))

(define array/lookup! (<oo unwrap! array/lookup))

;;? Returns index of the first occurence of the element in the array, if it *is* an element
(define (array/find x xs)
  ;; (forall (a) (Fun (Fun a a Bool) a (Array a) (Maybe Nat)))
  (array/find-by (= x) xs))

;;? Returns the index of the first element that satisfies the predicate
(define (array/find-by p xs)
  (let1 i (count (take-while (<o not p) (array/iter xs)))
    (if (< i (array/length xs))
        (Some i)
      None)))

;;? Positive m: skip from beginning, take from end. Negative m: skip from end, take from
;;? beginning.
(define: (array/skip m (Array ptr n))
    (forall (a) (Fun Int (Array a) (Array a)))
  (if (< m 0)
      (let1 m (min n (cast (neg m)))
        (Array ptr (- n m)))
    (let1 m (min n (cast m))
      (Array (ptr/+ ptr m) (- n m)))))

;;? Positive m: take from beginning, skip from end. Negative m: take from end, skip from
;;? beginning.
(define: (array/take m (Array ptr n))
    (forall (a) (Fun Int (Array a) (Array a)))
  (if (< m 0)
      (let1 m (min n (cast (neg m)))
        (Array (ptr/+ ptr (- n m)) m))
    (Array ptr (min n (cast m)))))

;;? Binary search
;;?
;;? If there are multiple matches, the index of any of them may be returned.
(define: (array/search cmp x ys)
    (forall (a) (Fun (Fun a a Cmp) a (Array a) (Maybe Nat)))
  (define (go start end)
    (if (= start end)
        None
      (let ((i (+ start (/ (- end start) (cast 2))))
            (y (array/lookup! i ys)))
        (match (cmp x y)
          (case Eq (Some i))
          (case Lt (go start i))
          (case Gt (go (inc i) end))))))
  (go (cast 0) (array/length ys)))

(define (array/split i (Array ptr n))
  (if (<= i n)
      (Some [(Array ptr i) (Array (ptr/+ ptr i) (- n i))])
    None))

(define (array/take-split i a)
  (match (array/split i a)
    (case (Some p) p)
    (case None [a array/nil])))

(define (array/split-last (Array ptr n))
  (if (= n (cast 0))
      None
    (Some [(Array ptr (- n (cast 1))) (deref (ptr/+ ptr (- n (cast 1))))])))
