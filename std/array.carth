(import iter)
(import mem)

(defun array/length [(Array _ n)] n)

(defun array/iter [arr] :of (forall (a) (Fun [(Array a)] (Iter a)))
  (map (fun [i] (array/lookup! i arr))
       (xrange (to-nat 0) (array/length arr))))

(defun array/iter-rev [(Array ptr len)] :of (forall (a) (Fun [(Array a)] (Iter a)))
  (map (fun [i] (deref (ptr/+ ptr (- len (cast i)))))
       (xrange 1 (+ 1 (cast len)))))

(def array/nil (Array mem/unsafe-null (cast 0)))

(defun array/nil? [a] (= (cast 0) (array/length a)))

(defun array/unsafe-uninit [n] :of (forall (a) (Fun [Nat] (Array a)))
  (Array (cast-ptr (id@"GC_malloc" (* (sizeof a) n)))
         n))

(defun array/singleton [x]
  (Array (box x) (cast 1)))

;; TODO: This is inefficient. Do something similar to Rust's Vec instead. Start array at
;; reserved size 1, and everytime space is full, increase the reserved size
;; exponentially. At the end, do a final reallocation to shrink to the now known size.
(defun array/collect [xs] :of (forall (a) (Fun [(Iter a)] (Array a)))
  (array/collect-list (list/collect xs)))

(defun array/collect-list [xs]
  (foldl (fun [v [i x]] (array/mutate i x v))
         (array/unsafe-uninit (list/count xs))
         (enumerate (list/iter xs))))

(defun array/mutate [i x (Array ptr n)] :of (forall (a) (Fun [Nat a (Array a)] (Array a)))
  (if (>= i n)
      (panic (apps str-append "array/mutate after end of array. i = " (show-nat i) ", len = " (show-nat n)))
    (seq (store x (ptr/+ ptr i))
         (Array ptr n))))

(defun array/mutate2d! [[i j] x arr]
  (seq (array/mutate j x (array/lookup! i arr))
       arr))

(defun array/clone [(Array p n)]
  (let1 (Array p' _) (array/unsafe-uninit n)
    (seq (memcpy' p' p n)
         (Array p' n))))

(defun array/reverse [a]
  (if (array/nil? a) a
    (cadr (array/build (fun [Unit i] [Unit (array/lookup! (- (dec (array/length a)) i) a)])
                       Unit
                       (array/length a)))))

(defun array/set! [i x arr]
  (array/mutate i x (array/clone arr)))

(defun array/set2d! [[i j] x arr]
  (array/mutate i (array/set! j x (array/lookup! i arr)) (array/clone arr)))

(defun array/set3d! [[i . rest] x arr]
  (array/mutate i (array/set2d! rest x (array/lookup! i arr)) (array/clone arr)))

(defun array/set-multiple! [arr ivs]
  (foldl (fun [arr [i v]] (array/mutate i v arr)) (array/clone arr) ivs))

(defun array/modify! [f i a]
  (array/set! i (f (array/lookup! i a)) a))

(defun array/modify2d! [f ij a]
  (array/set2d! ij (f (array/lookup2d! ij a)) a))

(defun array/modify-multiple! [arr ifs]
  (foldl (fun [arr [i f]] (array/mutate i (f (array/lookup! i arr)) arr)) (array/clone arr) ifs))

(defun array/append [(Array px nx) (Array py ny)] :of (forall (a) (Fun [(Array a) (Array a)] (Array a)))
  (let1 (Array pz nz) (array/unsafe-uninit (nat/nowrap+ nx ny))
    (apps seq
          (memcpy' pz px nx)
          (memcpy' (ptr/+ pz nx) py ny)
          (Array pz nz))))

(defun array/lookup [i a]
  (if (< i (array/length a))
      (Some (array/unsafe-lookup-unchecked i a))
    None))

(defun array/lookup! [i a]
  (if (< i (array/length a))
      (array/unsafe-lookup-unchecked i a)
    (panic (apps str-append "array/lookup!: index (" (show-nat i) ") out of bounds (length = " (show-nat (array/length a)) ")"))))

(defun array/unsafe-lookup-unchecked [i (Array ptr _)]
  (deref (ptr/+ ptr i)))

(defun array/lookup2d [[i j] rows]
  (match (array/lookup i rows)
    (case (Some row) (array/lookup j row))
    (case None None)))

(def array/lookup2d! (<oo unwrap! array/lookup2d))

;;? Returns index of the first occurence of the element in the array, if it *is* an element
(defun array/find [x xs]
  (array/find-by (partial-2 = x) xs))

(defun array/find-end [x xs]
  (array/find-by-end (partial-2 = x) xs))

(defun array/find-by2 [f xs]
  (if (array/nil? xs)
      None
    (Some (foldl (fun [[max-i max-x] [i x]]
                   (if (f x max-x)
                       [i x]
                     [max-i max-x]))
                 [(to-nat 0) (array/first! xs)]
                 (enumerate (array/iter (array/slice-from 1 xs)))))))

;;? Returns the index of the first element that satisfies the predicate
(defun array/find-by [p xs]
  (let1 i (count (take-while (<o not p) (array/iter xs)))
    (if (< i (array/length xs))
        (Some i)
      None)))

(defun array/find-by-end [p xs]
  (let1 i (count (take-while (<o not p) (array/iter-rev xs)))
    (if (< i (array/length xs))
        (Some (- (array/length xs) i))
      None)))

(defun array/find-slice-by [f xs] :of (forall (a b) (Fun [(Fun [(Array a)] (Maybe b)) (Array a)] (Maybe [Nat b])))
  (iter/first (filter-map (fun [[i ys]] (maybe/map (partial-2 cons' i) (f ys)))
                          (enumerate (array/suffixes xs)))))

(defun array/find-slice-by' [f xs] :of (forall (a) (Fun [(Fun [(Array a)] Bool) (Array a)] (Maybe Nat)))
  (iter/first (filter-map (fun [[i ys]] (if (f ys) (Some i) None))
                          (enumerate (array/suffixes xs)))))

(defun array/suffixes [xs]
  (if (array/nil? xs)
      iter/nil
    (iter/cons xs (map (fun [i] (array/slice-from i xs)) (xrange 1 (cast (array/length xs)))))))

;;? Supports negative `m` for python like range indexing
(defun array/slice-from [i (Array ptr len)] :of (forall (a) (Fun [Int (Array a)] (Array a)))
  (let1 i (if (< i 0)
              (cast (max 0 (+ (cast len) i)))
            (min len (cast i)))
    (Array (ptr/+ ptr i) (- len i))))

;;? Supports negative `m` for python-like range indexing
(defun array/slice-to [i (Array ptr len)] :of (forall (a) (Fun [Int (Array a)] (Array a)))
  (let1 i (if (< i 0)
              (cast (max 0 (+ (cast len) i)))
            (min len (cast i)))
    (Array ptr i)))

(defun array/slice [i j xs]
  (let ((len (array/length xs))
        (i (if (< i 0)
               (cast (max 0 (+ (cast len) i)))
             (min len (cast i)))))
    (array/slice-from (cast i) (array/slice-to j xs))))

;;? Binary search
;;?
;;? If there are multiple matches, the index of any of them may be returned.
(defun array/search [cmp-x ys] :of (forall (a) (Fun [(Fun [a] Cmp) (Array a)] (Either Nat Nat)))
  (defun go [[start end]]
    (if (= start end)
        (Left start)
      (let ((i (+ start (/ (- end start) (cast 2))))
            (y (array/lookup! i ys)))
        (match (cmp-x y)
          (case Eq (Right i))
          (case Lt (go [start i]))
          (case Gt (go [(inc i) end]))))))
  (go [(cast 0) (array/length ys)]))

(defun array/split [i (Array ptr n)]
  (if (<= i n)
      (Some [(Array ptr i) (Array (ptr/+ ptr i) (- n i))])
    None))

(defun array/split! [i (Array ptr n)]
  (if (<= i n)
      [(Array ptr i) (Array (ptr/+ ptr i) (- n i))]
    (panic "array/split: index out of bounds")))

(defun array/take-split [i a]
  (match (array/split i a)
    (case (Some p) p)
    (case None [a array/nil])))

(defun array/split-first [(Array ptr n)]
  (if (= n (cast 0))
      None
    (Some [(deref ptr) (Array (ptr/+ ptr (cast 1)) (- n (cast 1)))])))

(defun array/split-last [(Array ptr n)]
  (if (= n (cast 0))
      None
    (Some [(Array ptr (- n (cast 1))) (deref (ptr/+ ptr (- n (cast 1))))])))

(defun array/= [xs ys]
  (if (= (array/length xs) (array/length ys))
      (all (fun [[x y]] (= x y)) (zip (array/iter xs) (array/iter ys)))
    False))

(defun array/show [show-elem a]
  (apps str-append "{" (string/concat (intersperse " " (map show-elem (array/iter a)))) "}"))

(defun array/build [f acc n]
  (foldl (fun [[acc a] i] (let1 [acc' x] (f acc i)
                            [acc' (array/mutate i x a)]) )
         [acc (array/unsafe-uninit n)]
         (map to-nat (xrange 0 (to-int n)))))

(defun merge-sort [cmp xs] :of (forall (a) (Fun [(Fun [a a] Cmp) (Array a)] (Array a)))
  (defun merge [a i [y ys] zs]
    (match (next zs)
      (case (Some [z zs'])
            (match (cmp y z)
              (case Lt (merge (array/mutate i y a) (+ i (to-nat 1)) [z zs'] ys))
              (case _  (merge (array/mutate i z a) (+ i (to-nat 1)) [y ys] zs'))))
      (case None
            (foldl (fun [a [k y]] (array/mutate (+ i k) y a))
                   a
                   (enumerate (iter/cons y ys))))))
  (if (<= (array/length xs) (to-nat 1))
      xs
    (let1 [ys zs] (unwrap! (array/split (/ (array/length xs) (to-nat 2)) xs))
      (merge (array/unsafe-uninit (array/length xs))
             (to-nat 0)
             (next! (array/iter (merge-sort cmp ys)))
             (array/iter (merge-sort cmp zs))))))

(defun array/first! [a]
  (array/lookup! (to-nat 0) a))

(defun array/last! [a]
  (let1 n (array/length a)
    (if (= n (to-nat 0))
        (panic "array/last! of empty array")
      (array/lookup! (- n (to-nat 1)) a))))

(defun array/concat [as] :of (forall (a) (Fun [(Iter (Array a))] (Array a)))
  (let1 len (sum (map array/length as))
    (cadr (foldl (fun [[i (Array pacc nacc)] (Array p n)]
                   (seq (memcpy' (ptr/+ pacc i) p n)
                        [(+ i n) (Array pacc nacc)]))
                 [(to-nat 0) (array/unsafe-uninit len)]
                 as))))

(defun array/concat-list [as] (array/concat (list/iter as)))

(defun array/insert-grow! [i x xs] :of (forall (a) (Fun [Nat a (Array a)] (Array a)))
  (let1 [ys zs] (unwrap! (array/split i xs))
    (array/concat-list (list ys (array/singleton x) zs))))

(defun array/insert-displace-left! [i x xs] :of (forall (a) (Fun [Nat a (Array a)] [a (Array a)]))
  (let (([ys zs] (unwrap! (array/split (+ i (to-nat 1)) xs)))
        ([y ys] (unwrap! (array/split-first ys))))
    [y (array/concat-list (list ys (array/singleton x) zs))]))

(defun array/insert-displace! [i x xs] :of (forall (a) (Fun [Nat a (Array a)] [(Array a) a]))
  (let (([ys zs] (unwrap! (array/split i xs)))
        ([zs z] (unwrap! (array/split-last zs))))
    [(array/concat-list (list ys (array/singleton x) zs)) z]))

(defun array/map [f xs] :of (forall (a b) (Fun [(Fun [a] b) (Array a)] (Array b)))
  (cadr (array/build (fun [Unit i] [Unit (f (array/lookup! i xs))]) Unit (array/length xs))))

;;? Iterate over contiguous chunks of the underlying array
(defun array/chunks [width arr]
  (unfoldr (partial-2 array/split width) arr))

;;? For a sorted array, this is the median
(defun array/middle [xs] (array/lookup (/ (array/length xs) (to-nat 2)) xs))

(defun array/windows [n arr] :of (forall (a) (Fun [Nat (Array a)] (Iter (Array a))))
  (unfoldr (fun [xs]
             (let1 window (array/slice-to (to-int n) xs)
               (if (< (array/length window) n)  ; At the end
                   None
                 (Some [window (array/slice-from 1 xs)]))))
           arr))

(defun array/first-two! [a]
  [(array/lookup! (to-nat 0) a) (array/lookup! (to-nat 1) a)])
(defun array/first-three! [a]
  (cons (array/lookup! (to-nat 0) a) (array/first-two! (array/slice-from 1 a))))
(defun array/first-four! [a]
  (cons (array/lookup! (to-nat 0) a) (array/first-three! (array/slice-from 1 a))))
