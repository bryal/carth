(import std)

;; Size balanced binary tree. Indirectly based on Qifeng Chen's (2007) algorithm via
;; https://wcipeg.com/wiki/Size_Balanced_Tree
(data (Map k v)
  (MTree (Box [k v Nat (Map k v) (Map k v)]))
  MLeaf)

(defvar map/empty MLeaf)
(defun map/singleton [k v] (MTree (box [k v (to-nat 1) MLeaf MLeaf])))

(defun map/size
  (case [MLeaf] (to-nat 0))
  (case [(MTree (Box [_ _ n _ _]))] n))


(defun map/insert [cmp k v m] (map/adjust-or-insert cmp (const v) k v m))
(defun map/insert-with [cmp f k v2 m] (map/adjust-or-insert cmp (fun [v1] (f v1 v2)) k v2 m))

(defun map/adjust-or-insert [cmp f k v m] :of (forall (k v) (Fun (Fun k k Cmp) (Fun v v) k v (Map k v) (Map k v)))
  (defun go [m]
    (match m
      (case MLeaf [(map/singleton k v) True])
      (case (MTree (Box [k' v' n l r]))
            (let1 res (match (cmp k k')
                        (case Eq [(MTree (box [k' (f v') n l r])) False])
                        (case Lt (let1 [l' grew?] (go l)
                                   [(MTree (box [k' v' (if grew? (inc n) n) l' r])) grew?]))
                        (case Gt (let1 [r' grew?] (go r)
                                   [(MTree (box [k' v' (if grew? (inc n) n) l r'])) grew?])))
              (if (cadr res) (map-car map/-maintain res) res)))))
  (car (go m)))

(defun map/-maintain [t]
  (let ((l (map/left-child! t))
        (r (map/right-child! t))
        (size' (fun [child] (maybe' (to-nat 0) map/size child))))
    (cond ((< (map/size l) (size' (map/left-child r)))
           (apps |> t
                 (map/map-right map/-right-rot)
                 map/-left-rot
                 (map/map-left map/-maintain)
                 (map/map-right map/-maintain)
                 map/-maintain))
          ((< (map/size l) (size' (map/right-child r)))
           (apps |> t
                 map/-left-rot
                 (map/map-left map/-maintain)
                 map/-maintain))
          ((< (map/size r) (size' (map/right-child l)))
           (apps |> t
                 (map/map-left map/-left-rot)
                 map/-right-rot
                 (map/map-left map/-maintain)
                 (map/map-right map/-maintain)
                 map/-maintain))
          ((< (map/size r) (size' (map/left-child l)))
           (apps |> t
                 map/-right-rot
                 (map/map-right map/-maintain)
                 map/-maintain))
          (else
           t))))

(defun map/-left-rot (case [MLeaf] MLeaf) (case [(MTree (Box m))] (MTree (map/-left-rot' m))))
;; FIXME: Segfault if we accept the tuple wrapped in its box here.
(defun map/-left-rot' [[k v n l r]]
  (match r
    (case (MTree (Box [rk rv rn rl rr]))
          (box [rk rv n (MTree (box [k v (inc (+ (map/size l) (map/size rl))) l rl])) rr]))
    (case MLeaf (panic "map/-left-rot': right child is leaf"))))

(defun map/-right-rot (case [MLeaf] MLeaf) (case [(MTree (Box m))] (MTree (map/-right-rot' m))))
(defun map/-right-rot' [[k v n l r]]
  (match l
    (case (MTree (Box [lk lv ln ll lr]))
          (box [lk lv n ll (MTree (box [k v (inc (+ (map/size lr) (map/size r))) lr r]))]))
    (case MLeaf (panic "map/-right-rot': left child is leaf"))))

(defun map/map-left [f]
  (fun (case [MLeaf] MLeaf)
    (case [(MTree (Box [k v n l r]))]
          (MTree (box [k v n (f l) r])))))

(defun map/map-right [f]
  (fun (case [MLeaf] MLeaf)
    (case [(MTree (Box [k v n l r]))]
          (MTree (box [k v n l (f r)])))))

(defun map/adjust [cmp f k m] :of (forall (k v) (Fun (Fun k k Cmp) (Fun v v) k (Map k v) (Map k v)))
  (defun go
    (case [MLeaf] MLeaf)
    (case [(MTree (Box [k' v n l r]))]
          (match (cmp k k')
            (case Eq (MTree (box [k' (f v) n l r])))
            (case Lt (MTree (box [k' v n (go l) r])))
            (case Gt (MTree (box [k' v n l (go r)]))))))
  (go m))

(defun map/lookup [cmp k m]
  (defun go
    (case [MLeaf] None)
    (case [(MTree (Box [k' v _ l r]))]
          (match (cmp k k')
            (case Eq (Some v))
            (case Lt (go l))
            (case Gt (go r)))))
  (go m))

(defun map/lookup! [cmp k m] (unwrap! (map/lookup cmp k m)))

(defun map/iter
  (case [MLeaf] iter/nil)
  (case [(MTree (Box [k v _ l r]))]
        (apps iter/chain (map/iter l) (iter/once [k v]) (map/iter r))))

(defun map/collect [cmp kvs] (map/extend cmp map/empty kvs))
(defun map/collect-with [cmp f kvs] (map/extend-with cmp f map/empty kvs))

(defun map/extend [cmp m kvs]
  (deref (foldl (fun [(Box m) [k v]] (box (map/insert cmp k v m))) (box m) kvs)))
(defun map/extend-with [cmp f m kvs]
  (deref (foldl (fun [(Box m) [k v]] (box (map/insert-with cmp f k v m))) (box m) kvs)))

(defun map/collect-with-count [cmp it]
  (map/extend-with-count cmp map/empty it))

(defun map/extend-with-count [cmp m it]
  (deref (foldl (fun [(Box m) x] (box (map/insert-with cmp + x (to-nat 1) m))) (box m) it)))

(defun map/left-child
  (case [MLeaf] None)
  (case [(MTree (Box [_ _ _ l _]))] (Some l)))
(defun map/right-child
  (case [MLeaf] None)
  (case [(MTree (Box [_ _ _ _ r]))] (Some r)))

(defun map/left-child!
  (case [MLeaf] (panic "map/left-child!: leaf has no left child"))
  (case [(MTree (Box [_ _ _ l _]))] l))
(defun map/right-child!
  (case [MLeaf] (panic "map/right-child!: leaf has no right child"))
  (case [(MTree (Box [_ _ _ _ r]))] r))

(defun map/map
  (case [_ MLeaf] MLeaf)
  (case [f (MTree (Box [k v n l r]))]
        (MTree (box [k (f v) n (map/map f l) (map/map f r)]))))

(defun map/unions [cmp ms] (foldl (fun [macc m] (map/union cmp macc m)) map/empty ms))

;; TODO: Use more efficient algorithm
(defun map/union [cmp m1 m2]
  (map/extend cmp m1 (map/iter m2)))

;; TODO: Use more efficient algorithm
;;
;; Data of first map for keys of second map
(defun map/isect [cmp m1 m2]
  (map/collect cmp (filter-map (fun [k] (maybe/map (partial-2 cons' k) (map/lookup cmp k m1))) (map/keys m2))))

(defun map/keys [m] (map car (map/iter m)))
(defun map/vals [m] (map cadr (map/iter m)))

(defun map/member? [cmp k m] (some? (map/lookup cmp k m)))

(defun map/empty? (case [MLeaf] True) (case [_] False))

;; Wiki says maintenance after deleting is extraneous
(defun map/remove-min :of (forall (k v) (Fun (Map k v) (Maybe [[k v] (Map k v)])))
  (case [MLeaf] None)
  (case [(MTree (Box [k v n l r]))]
        (match (map/remove-min l)
          (case (Some [x l]) (Some [x (MTree (box [k v (dec n) l r]))]))
          (case None (Some [[k v] r])))))

;; Wiki says maintenance after deleting is extraneous
(defun map/remove-max :of (forall (k v) (Fun (Map k v) (Maybe [[k v] (Map k v)])))
  (case [MLeaf] None)
  (case [(MTree (Box [k v n l r]))]
        (match (map/remove-max r)
          (case (Some [x r]) (Some [x (MTree (box [k v (dec n) l r]))]))
          (case None (Some [[k v] l])))))

(defun map/remove [cmp k m]
  (defun go
    (case [MLeaf] None)
    (case [(MTree (Box [k' v n l r]))]
          (match (cmp k k')
            (case Eq (Some [v (if (map/empty? l)
                                  r
                                (match (map/remove-min r)
                                  (case None l)
                                  (case (Some [[ksucc vsucc] r])
                                        (MTree (box [ksucc vsucc (dec n) l r])))))]))
            (case Lt (maybe/map (partial-2 map-cadr (fun [l] (MTree (box [k' v (dec n) l r]))))
                                (go l)))
            (case Gt (maybe/map (partial-2 map-cadr (fun [r] (MTree (box [k' v (dec n) l r]))))
                                (go r))))))
  (go m))

(defun map/delete [cmp k m] (maybe' m cadr (map/remove cmp k m)))

(defun map/show
  (case [_ _ MLeaf] "MLeaf")
  (case [show-k show-v (MTree (Box [k v n l r]))]
        (apps str-append "(MTree " (show-k k) " " (show-v v) " " (show-nat n) " " (map/show show-k show-v l) " " (map/show show-k show-v r) ")")))
