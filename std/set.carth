(import std)

(data (Set a) (Set (Map a Unit)))

(define set/nil (Set map/nil))
(define (set/singleton a) (Set (map/singleton a Unit)))

(define (set/unsingleton! s)
  (match (next (set/iter s))
    (case (Some [x xs]) (if (iter/nil? xs)
                            x
                          (panic "set/unsingleton!: set contains more than one element")))
    (case None (panic "set/unsingleton!: set is empty"))))

(define (set/iter (Set m)) (map car (map/iter m)))

(define (set/collect cmp xs) (set/extend cmp set/nil xs))
(define (set/extend cmp (Set m) xs) (Set (map/extend cmp m (zip xs (repeat Unit)))))

(define (set/unions cmp) (foldl (set/union cmp) set/nil))

;; TODO: Use more efficient algorithm
(define (set/union cmp (Set m1) (Set m2)) (Set (map/union cmp m1 m2)))

(define (set/isect cmp (Set m1) (Set m2))
  (Set (map/isect cmp m1 m2)))

(define (set/size (Set m)) (map/size m))

(define (set/member? cmp x (Set m)) (map/member? cmp x m))

;; TODO: better algo
(define (set/diff cmp s1 s2)
  (set/collect cmp (filter (<o not (flip (set/member? cmp) s2)) (set/iter s1))))

(define (set/insert cmp x (Set m)) (Set (map/insert cmp x Unit m)))
