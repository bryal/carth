(import std)

(data (Set a) (Set (Map a Unit)))

(def set/empty (Set map/empty))
(defun set/singleton [a] (Set (map/singleton a Unit)))

(defun set/unsingleton! [s]
  (match (next (set/iter s))
    (case (Some [x xs]) (if (iter/nil? xs)
                            x
                          (panic "set/unsingleton!: set contains more than one element")))
    (case None (panic "set/unsingleton!: set is empty"))))

(defun set/iter [(Set m)] (map car (map/iter m)))

(defun set/collect [cmp xs] (set/extend cmp set/empty xs))
(defun set/extend [cmp (Set m) xs] (Set (map/extend cmp m (zip xs (repeat Unit)))))

(defun set/unions [cmp ss] (foldl (fun [sacc s] (set/union cmp sacc s)) set/empty ss))

;; TODO: Use more efficient algorithm
(defun set/union [cmp (Set m1) (Set m2)] (Set (map/union cmp m1 m2)))

(defun set/isect [cmp (Set m1) (Set m2)]
  (Set (map/isect cmp m1 m2)))

(defun set/size [(Set m)] (map/size m))

(defun set/member? [cmp x (Set m)] (map/member? cmp x m))

;; TODO: better algo
(defun set/diff [cmp s1 s2]
  (set/collect cmp (filter (fun [x] (not (set/member? cmp x s2))) (set/iter s1))))

(defun set/insert [cmp x (Set m)] (Set (map/insert cmp x Unit m)))

(defun set/delete [cmp x (Set m)] (Set (map/delete cmp x m)))
