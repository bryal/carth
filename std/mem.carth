(import std)

(defun box [x] :of (forall (a) (Fun [a] (Box a)))
  (store x (cast-ptr (id@"GC_malloc" (sizeof a)))))

(defvar cast-ptr :of (forall (a b) (Fun [(Box a)] (Box b)))
  transmute)

(defun ptr/+ [ptr x] :of (forall (a) (Fun [(Box a) Nat] (Box a)))
  (transmute (+ (transmute ptr) (* x (cast (sizeof a))))))

(defvar mem/unsafe-null :of (forall (a) (Box a))
  (transmute 0))

(extern memcpy (Fun [(Box Unit) (Box Unit) Nat]
                    (Box Unit)))

(defun memcpy' [dest src count] :of (forall (a) (Fun [(Box a) (Box a) Nat] (Box a)))
  (transmute (memcpy (transmute dest)
                     (transmute src)
                     (* count (sizeof a)))))
