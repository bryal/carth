(import iter)

(define: pi F64 3.14159265358979323846264338327950288)
(define: inv-pi F64 0.318309886183790671537767526745028724)

(extern sin (Fun F64 F64))
(extern cos (Fun F64 F64))
(extern tan (Fun F64 F64))

(define (inc n) (+ n (cast 1)))
(define (dec n) (- n (cast 1)))

(define (neg x) (- 0 x))

(define (min a b) (if (< a b) a b))
(define (max a b) (if (> a b) a b))

(define (square x) (* x x))

(define (and p q) (if p q    False))
(define (or  p q) (if p True q))

(define not (fmatch (case True False)
                    (case False True)))

(define (divisible? n m) (= (rem n m) (cast 0)))

(define (powi x y)
  (define (go acc x y)
    (if (= y 0)
        acc
      (if (divisible? y 2)
          (go acc (square x) (/ y 2))
        (go (* acc x) x (dec y)))))
  (go (cast 1) x y))

(define sum (foldl + (cast 0)))
