(import iter)

(def pi :of F64 3.14159265358979323846264338327950288)
(def inv-pi :of F64 0.318309886183790671537767526745028724)

(extern sin (Fun [F64] F64))
(extern cos (Fun [F64] F64))
(extern tan (Fun [F64] F64))

(extern sqrt (Fun [F64] F64))

(defun inc [n] :of (forall (a) (where (Num a) (Cast Int a))
                           (Fun [a] a))
  (+ n (cast 1)))

(defun dec [n] (- n (cast 1)))

(defun neg [x] (- (cast 0) x))

(defun min [a b] (if (< a b) a b))
(defun max [a b] (if (> a b) a b))

(defun square [x] (* x x))

(defun and [p q] (if p q    False))
(defun or  [p q] (if p True q))

(defun not (case [True] False)
  (case [False] True))

(defun divisible? [n m] (= (rem n m) (cast 0)))

(defun powi [x y]
  (defun go [acc x y]
    (if (= y (cast 0))
        acc
      (if (divisible? y (cast 2))
          (go acc (square x) (/ y (cast 2)))
        (go (* acc x) x (dec y)))))
  (go (cast 1) x y))

(defun sum [xs] (foldl + (cast 0) xs))
(defun product [xs] (foldl * (cast 1) xs))

(def nat/maxval :of Nat (cast -1))

(defun nat/checked+ [x y] :of (Fun [Nat Nat] (Maybe Nat))
  (let1 z (+ x y)
    (if (< z x)
        None
      (Some z))))

(defun nat/nowrap+ [x y]
  (unwrap-or-else (fun [Unit] (panic "nat/nowrap+: addition overflowed"))
                  (nat/checked+ x y)))

(defun bit-set? [i n]
  (/= (cast 0) (bit-and n (shift-l (cast 1) i))))

(defun set-bit [i b n]
  (if b
      (bit-or n (shift-l (cast 1) i))
    (bit-and n (bit-not (shift-l (cast 1) i)))))

(defun index-bit [i n]
  (bit-and 1 (lshift-r n i)))

(defun bit-not [n]
  (- (- (cast 0) n) (cast 1)))

(defun abs [x] (if (> x 0) x (neg x)))
(defun sign [x] (if (> x 0) 1 -1))
