(import std)

(data (Maybe a)
  None
  (Some a))

(defun maybe
  (case [_ f (Some a)] (f a))
  (case [b _ None]     (b Unit)))

;; Version of `maybe` that is strict in `b`
(defun maybe'
  (case [_ f (Some a)] (f a))
  (case [b _ None]     b))

(defun maybe/or [ma f]
  (if (some? ma) ma (f Unit)))

(defun unwrap!
  (case [(Some x)] x)
  (case [None] (panic "unwrap! of None")))

(defun unwrap-or
  (case [_ (Some a)] a)
  (case [b None] b))

(defun unwrap-or-else
  (case [f (Some x)] x)
  (case [f None] (f Unit)))

(defun maybe/map
  (case [f (Some x)] (Some (f x)))
  (case [_ None] None))

(defun maybe/map2 [f ma mb] (maybe/lift2 (<oo Some f) ma mb))

(defun maybe/lift2 [f ma mb]
  (maybe/bindr ma (fun [a] (maybe/bindr mb (partial-2 f a)))))

(defun maybe/bind :of (forall (a b) (Fun (Fun a (Maybe b)) (Maybe a) (Maybe b)))
  (case [f (Some a)] (f a))
  (case [f None] None))

(defvar maybe/bindl maybe/bind)
(defvar maybe/bindr (flip maybe/bind))

(defun maybe/iter [x] (maybe' iter/nil iter/once x))

(defun some?
  (case [(Some _)] True)
  (case [None] False))
(defun none?
  (case [(Some _)] False)
  (case [None] True))

(defun maybe/show [show-a]
  (fun
    (case [(Some a)] (apps str-append "(Some " (show-a a) ")"))
    (case [None]     "None")))

(defun maybe/= [inner= ma mb]
  (match [ma mb]
    (case [(Some a) (Some b)] (inner= a b))
    (case _                   False)))

(defvar cat-maybes (partial-2 filter-map id))
