(import std)

(data (Maybe a)
  None
  (Some a))

(define (maybe b f)
  (fmatch
    (case (Some a) (f a))
    (case None     b)))

(define unwrap!
  (fmatch (case (Some x) x)
          (case None (panic "unwrap! of None"))))

(define (unwrap-or b)
  (fmatch (case (Some a) a)
          (case None b)))

(define (unwrap-or-else f)
  (fmatch (case (Some x) x)
          (case None (f Unit))))

(define (maybe/map f)
  (fmatch (case (Some x) (Some (f x)))
          (case None None)))

(define (maybe/map2 f) (maybe/lift2 (<oo Some f)))

(define (maybe/lift2 f ma mb)
  (maybe/bindr ma (fun (a) (maybe/bindr mb (f a)))))

(define (maybe/bind f)
  (fmatch
    (case (Some a) (f a))
    (case None None)))

(define maybe/bindl maybe/bind)
(define maybe/bindr (flip maybe/bind))

(define maybe/iter (maybe iter/nil iter/once))

(define some? (fmatch (case (Some _) True)
                      (case None False)))
(define none? (fmatch (case (Some _) False)
                      (case None True)))
