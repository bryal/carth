(import std)

(data (List a)
  (LCons (Box [a (List a)]))
  LNil)

(defun first
  (case [(LCons (Box [x _]))] (Some x))
  (case [LNil] None))
(defun first!
  (case [(LCons (Box [x _]))] x)
  (case [LNil] (panic "first! of empty list")))

(defun rest
  (case [(LCons (Box [_ xs]))] (Some xs))
  (case [LNil] None))
(defun rest!
  (case [(LCons (Box [_ xs]))] xs)
  (case [LNil] (panic "rest! of empty list")))

(defun list/uncons
  (case [(LCons (Box p))] (Some p))
  (case [LNil] None))
(defun list/uncons!
  (case [(LCons (Box p))] p)
  (case [LNil] (panic "list/uncons! of empty list")))

(defun last
  (case [(LCons (Box [x LNil]))] (Some x))
  (case [(LCons (Box [_ xs]))] (last xs))
  (case [LNil] None))
(defun last!
  (case [(LCons (Box [x LNil]))] x)
  (case [(LCons (Box [_ xs]))] (last! xs))
  (case [LNil] (panic "last! of empty list")))

(defun init
  (case [LNil] None)
  (case [xs] (Some (init! xs))))
(defun init!
  (case [(LCons (Box [_ LNil]))] LNil)
  (case [(LCons (Box [x xs]))] (list/cons x (init! xs)))
  (case [LNil] (panic "init! of empty list")))

(defun list/nil? (case [LNil] True) (case [_] False))

(defun list/reverse [xs]
  (defun rev [xs a]
    (match xs
      (case LNil a)
      (case (LCons (Box [x xs']))
            (rev xs' (list/cons x a)))))
  (rev xs LNil))

(defun list/cons [x xs]
  (LCons (box [x xs])))

(defun list/iter [xs]
  (Iter (fun [Unit]
          (match xs
            (case (LCons (Box [y ys]))
                  (Some [y (list/iter ys)]))
            (case LNil
                  None)))))

(defun list/append [xs ys]
  (match xs
    (case (LCons (Box [x xs'])) (list/cons x (list/append xs' ys)))
    (case LNil ys)))

(defun list/append' [xs ys]
  (match (next xs)
    (case (Some [x xs']) (list/cons x (list/append' xs' ys)))
    (case None ys)))

(defun list/concat
  (case [(LCons (Box [xs xss]))] (list/append xs (list/concat xss)))
  (case [LNil] LNil))

(defun list/map
  (case [f (LCons (Box [x xs]))] (list/cons (f x) (list/map f xs)))
  (case [_ LNil] LNil))

(defun list/bind [f xs]
  (list/concat (list/map f xs)))

(defun list/bindr [xs f]
  (list/concat (list/map f xs)))

(defun list/when [condition xs]
  (if condition xs LNil))

(defun list/singleton [x]
  (list/cons x LNil))

(defun list/collect [it]
  (list/reverse (foldl (fun [acc x] (list/cons x acc)) LNil it)))

(defun list/count [xs]
  (count (list/iter xs)))

(defun list/elem?
  (case [_ _ LNil] False)
  (case [cmp x (LCons (Box [y ys]))]
        (match (cmp x y) (case Eq True) (case _ (list/elem? cmp x ys)))))

(defun list/show [show-x xs]
  (apps str-append "{" (string/concat (intersperse " " (map show-x (list/iter xs)))) "}"))
