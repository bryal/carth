(import std)

(data (List a)
  (LCons (Box [a (List a)]))
  Nil)

(define first
  (fmatch (case (LCons (Box [x _])) (Some x))
          (case Nil None)))
(define first!
  (fmatch (case (LCons (Box [x _])) x)
          (case Nil (panic "first! of empty list"))))

(define rest
  (fmatch (case (LCons (Box [_ xs])) (Some xs))
          (case Nil None)))
(define rest!
  (fmatch (case (LCons (Box [_ xs])) xs)
          (case Nil (panic "rest! of empty list"))))

(define list/uncons
  (fmatch (case (LCons (Box p)) (Some p))
          (case Nil None)))

(define last
  (fmatch (case (LCons (Box [x Nil])) (Some x))
          (case (LCons (Box [_ xs])) (last xs))
          (case Nil None)))
(define last!
  (fmatch (case (LCons (Box [x Nil])) x)
          (case (LCons (Box [_ xs])) (last! xs))
          (case Nil (panic "last! of empty list"))))

(define init
  (fmatch (case Nil None)
          (case xs (Some (init! xs)))))
(define init!
  (fmatch (case (LCons (Box [_ Nil])) Nil)
          (case (LCons (Box [x xs])) (list/cons x (init! xs)))
          (case Nil (panic "init! of empty list"))))

(define list/nil? (fmatch (case Nil True) (case _ False)))

(define (list/reverse xs)
  (define (rev xs a)
    (maybe' a (fun ([x xs']) (rev xs' (list/cons x a))) (list/uncons xs)))
  (rev xs Nil))

(define (list/cons x xs)
  (LCons (box [x xs])))

(define (list/iter xs)
  (Iter (fun (Unit)
          (match xs
            (case (LCons (Box [y ys]))
                  (Some [y (list/iter ys)]))
            (case Nil
                  None)))))

(define (list/append xs ys)
  (match xs
    (case (LCons (Box [x xs'])) (list/cons x (list/append xs' ys)))
    (case Nil ys)))

(define list/concat
  (fmatch (case (LCons (Box [xs xss])) (list/append xs (list/concat xss)))
          (case Nil Nil)))

(define (list/map f)
  (fmatch (case (LCons (Box [x xs])) (list/cons (f x) (list/map f xs)))
          (case Nil Nil)))

(define (list/bind f xs)
  (list/concat (list/map f xs)))

(define (list/bindr xs f)
  (list/concat (list/map f xs)))

(define (list/when condition xs)
  (if condition xs Nil))

(define (list/singleton x)
  (list/cons x Nil))

(define (list/collect it)
  (list/reverse (foldl (fun (acc x) (list/cons x acc)) Nil it)))

(define (list/count xs)
  (count (list/iter xs)))

(define (list/elem? cmp x)
  (fmatch (case Nil False)
          (case (LCons (Box [y ys]))
                (match (cmp x y) (case Eq True) (case _ (list/elem? cmp x ys))))))
