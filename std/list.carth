(import std)

(data (List a)
  (Cons (Box (Pair a (List a))))
  Nil)

(define first
  (fmatch (case (Cons (Box (Pair x _))) (Some x))
          (case Nil None)))
(define first!
  (fmatch (case (Cons (Box (Pair x _))) x)
          (case Nil (panic "first! of empty list"))))

(define rest
  (fmatch (case (Cons (Box (Pair _ xs))) (Some xs))
          (case Nil None)))
(define rest!
  (fmatch (case (Cons (Box (Pair _ xs))) xs)
          (case Nil (panic "rest! of empty list"))))

(define last
  (fmatch (case (Cons (Box (Pair x Nil))) (Some x))
          (case (Cons (Box (Pair _ xs))) (last xs))
          (case Nil None)))
(define last!
  (fmatch (case (Cons (Box (Pair x Nil))) x)
          (case (Cons (Box (Pair _ xs))) (last! xs))
          (case Nil (panic "last! of empty list"))))

(define init
  (fmatch (case Nil None)
          (case xs (Some (init! xs)))))
(define init!
  (fmatch (case (Cons (Box (Pair _ Nil))) Nil)
          (case (Cons (Box (Pair x xs))) (list/cons x (init! xs)))
          (case Nil (panic "init! of empty list"))))

(define (list/cons x xs)
  (Cons (box (Pair x xs))))

(define (list1 x)
  (list/cons x Nil))
(define (list2 x0 x1)
  (list/cons x0 (list1 x1)))
(define (list3 x0 x1 x2)
  (list/cons x0 (list2 x1 x2)))
(define (list4 x0 x1 x2 x3)
  (list/cons x0 (list3 x1 x2 x3)))
(define (list5 x0 x1 x2 x3 x4)
  (list/cons x0 (list4 x1 x2 x3 x4)))
(define (list6 x0 x1 x2 x3 x4 x5)
  (list/cons x0 (list5 x1 x2 x3 x4 x5)))

(define (list/iter xs)
  (Iter (fun (Unit)
          (match xs
            (case (Cons (Box (Pair y ys)))
                  (Some (Pair y (list/iter ys))))
            (case Nil
                  None)))))
