(import std)

(data (List a)
  (LCons (Box [a (List a)]))
  Nil)

(define first
  (fmatch (case (LCons (Box [x _])) (Some x))
          (case Nil None)))
(define first!
  (fmatch (case (LCons (Box [x _])) x)
          (case Nil (panic "first! of empty list"))))

(define rest
  (fmatch (case (LCons (Box [_ xs])) (Some xs))
          (case Nil None)))
(define rest!
  (fmatch (case (LCons (Box [_ xs])) xs)
          (case Nil (panic "rest! of empty list"))))

(define list/uncons
  (fmatch (case (LCons (Box p)) (Some p))
          (case Nil None)))

(define last
  (fmatch (case (LCons (Box [x Nil])) (Some x))
          (case (LCons (Box [_ xs])) (last xs))
          (case Nil None)))
(define last!
  (fmatch (case (LCons (Box [x Nil])) x)
          (case (LCons (Box [_ xs])) (last! xs))
          (case Nil (panic "last! of empty list"))))

(define init
  (fmatch (case Nil None)
          (case xs (Some (init! xs)))))
(define init!
  (fmatch (case (LCons (Box [_ Nil])) Nil)
          (case (LCons (Box [x xs])) (list/cons x (init! xs)))
          (case Nil (panic "init! of empty list"))))

(define list/nil? (fmatch (case Nil True) (case _ False)))

(define (list/reverse xs)
  (define (rev xs a)
    (maybe a (fun ([x xs']) (rev xs' (list/cons x a))) (list/uncons xs)))
  (rev xs Nil))

(define (list/cons x xs)
  (LCons (box [x xs])))

(define (list1 x)
  (list/cons x Nil))
(define (list2 x0 x1)
  (list/cons x0 (list1 x1)))
(define (list3 x0 x1 x2)
  (list/cons x0 (list2 x1 x2)))
(define (list4 x0 x1 x2 x3)
  (list/cons x0 (list3 x1 x2 x3)))
(define (list5 x0 x1 x2 x3 x4)
  (list/cons x0 (list4 x1 x2 x3 x4)))
(define (list6 x0 x1 x2 x3 x4 x5)
  (list/cons x0 (list5 x1 x2 x3 x4 x5)))

(define (list/iter xs)
  (Iter (fun (Unit)
          (match xs
            (case (LCons (Box [y ys]))
                  (Some [y (list/iter ys)]))
            (case Nil
                  None)))))
