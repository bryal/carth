(import array)

;;? Iterate over the unicode scalar values / code points / UTF-32 values of the
;;? string.
;;?
;;? A `Str` is UTF-8, so this function essentially converts from UTF-8 to UTF-32
;;? on the fly in the form of a lazy iterator.
;;?
;;? Note that a code point may not match your idea of what a character
;;? is. Iteration over grapheme clusters may instead be what you really want.
(defun string/codepoints [s] :of (Fun [Str] (Iter Nat32))
  (defun go [bs]
    (Iter (fun [_] (maybe/map (partial-2 map-cadr (fun [n] (go (skip (cast n) bs))))
                              (string/next-codepoint bs)))))
  (go (string/bytes s)))

(defun string/next-codepoint [bytes] :of (Fun [(Iter Nat8)] (Maybe [Nat32 Nat]))
  (defun init-byte [b] :of (Fun [Nat8] [Nat8 Nat])
    (if (= (cast 0) (bit-and b (cast 0b10000000)))
        [b (cast 0)]
      (if (= (cast 0) (bit-and b (cast 0b00100000)))
          [(bit-and b (cast 0b00011111))
           (cast 1)]
        (if (= (cast 0) (bit-and b (cast 0b00010000)))
            [(bit-and b (cast 0b00001111))
             (cast 2)]
          [(bit-and b (cast 0b00000111))
           (cast 3)]))))
  (defvar cont-byte :of (Fun [Nat8] Nat8) (partial-2 bit-and (cast 0b00111111)))
  (defun join [a b] :of (Fun [Nat32 Nat8] Nat32)
    (+ (shift-l (cast a) (cast 6))
       (cast (cont-byte b))))
  (maybe/map (fun [[b0 bytes']]
               (let1 [b0' n] (init-byte b0)
                 [(foldl join (cast b0') (take (cast n) bytes'))
                  (+ n (cast 1))]))
             (next bytes)))

;;? Iterate over the indivitual bytes of a string.
;;?
;;? Note that a single byte only represents a whole "character" if your UTF-8
;;? string is actually only of the ASCII subset.
(defun string/bytes [(Str xs)]
  (array/iter xs))
(defun string/bytes-rev [(Str xs)]
  (array/iter-rev xs))

(defun string/collect-bytes [it]
  (Str (array/collect it)))

(defun string/length-bytes [(Str bs)]
  (array/length bs))

;;? Show an integer in hexadecimal notation
(defun show-hex [n] :of (Fun [Int] Str)
  (defun it [n] :of (Fun [Int] (Iter Nat8))
    (if (= n 0)
        iter/nil
      (let ((x (bit-and 0b1111 n))
            (c (if (< x 0xa)
                   (+ 48 x)
                 (+ 97 (- x 0xa)))))
        (iter/cons (cast c) (it (lshift-r n 4))))))
  (if (= n 0)
      "0x0"
    (str-append "0x" (Str (array/collect (reverse (it n)))))))

(defun lines [s] :of (Fun [Str] (Iter Str))
  (defun lines' [s]
    (Iter (fun [Unit]
            (if (string/empty? s)
                None
              (Some (match (string/split-first-line s)
                      (case (Some [l s']) [l (lines' s')])
                      (case None          [s iter/nil])))))))
  (lines' s))

(defun string/split-first-line [(Str s)]
  (defun trim-carriage [xs]
    (match (array/split-last xs)
      (case None xs)
      (case (Some [ys y]) (if (= y ascii-carriage-return)
                              ys
                            xs))))
  (maybe/map (fun [i] (map-two (<o Str trim-carriage)
                               (<o Str (partial-2 array/slice-from 1))
                               (unwrap! (array/split i s))))
             (array/find (cast ascii-newline) s)))

(defun words [s]
  (filter string/nonempty?
          (string/splits-by (fun [s] (if (maybe' False whitespace-byte? (iter/first (string/bytes s)))
                                         (Some (cast 1))
                                       None))
                            s)))

(defun string/splits-on [sep s] :of (Fun [Str Str] (Iter Str))
  (string/splits-by (fun [s'] (if (string/prefix? sep s')
                                  (Some (string/length-bytes sep))
                                None))
                    s))

(defun string/splits-by [f (Str bs)] :of (Fun [(Fun [Str] (Maybe Nat)) Str] (Iter Str))
  (unfoldr (fun [bs]
             (if (array/nil? bs)
                 None
               (match (array/find-slice-by (<o f Str) bs)
                 (case (Some [i n]) (Some [(Str (array/slice 0 (cast i) bs))
                                           (array/slice-from (cast (+ i n)) bs)]))
                 (case None (Some [(Str bs) array/nil])))))
           bs))

(defun string/split-by [f (Str bs)] :of (Fun [(Fun [Str] Bool) Str] (Maybe [Str Str]))
  (maybe/map (fun [i] [(Str (array/slice 0 (cast i) bs))
                       (Str (array/slice-from (cast i) bs))])
             (array/find-slice-by' (<o f Str) bs)))

(defun string/split-first-codepoint [s]
  (maybe/map (partial-2 map-cadr (fun [n] (string/substr-from (to-int n) s))) (string/next-codepoint (string/bytes s))))

(defun string/split-at-byte [i (Str a)]
  (match (array/split i a)
    (case (Some [a1 a2]) (Some [(Str a1) (Str a2)]))
    (case None None)))

;; May produce invalid UTF-8 strings
(defun string/substr-from [i (Str arr)] (Str (array/slice-from i arr)))
(defun string/substr-to [i (Str arr)]   (Str (array/slice-to i arr)))
(defun string/substr [i j (Str arr)]    (Str (array/slice i j arr)))

(defun string/empty? [(Str s)]
  (array/nil? s))

(defun string/nonempty? [(Str s)]
  (> (array/length s) (cast 0)))

(defun whitespace-byte? [b]
  (any (partial-2 = b) (string/bytes " \t\r\n")))

(defun alphabetic-byte? [b]
  (or (and (>= b ascii-A) (<= b ascii-Z))
      (and (>= b ascii-a) (<= b ascii-z))))

(defun uppercase-byte? [b] (and (>= b ascii-A) (<= b ascii-Z)))
(defun lowercase-byte? [b] (and (>= b ascii-a) (<= b ascii-z)))

(defvar ascii-carriage-return :of Nat8 (cast 0xD))
(defvar ascii-newline :of Nat8 (cast 0xA))
(defvar ascii-space :of Nat8 (cast 0x20))
(defvar ascii-minus :of Nat8 (cast 0x2D))
(defvar ascii-0 :of Nat8 (cast 0x30))
(defvar ascii-1 :of Nat8 (cast 0x31))
(defvar ascii-9 :of Nat8 (cast 0x39))
(defvar ascii-A :of Nat8 (cast 0x41))
(defvar ascii-Z :of Nat8 (cast 0x5A))
(defvar ascii-a :of Nat8 (cast 0x61))
(defvar ascii-z :of Nat8 (cast 0x7A))

(defun parse-int [s]
  (maybe/bindr (next (string/bytes s))
               (fun [[c cs]]
                 (let1 [sign cs] (if (= c ascii-minus)
                                     [-1 cs]
                                   [1 (iter/cons c cs)])
                   (maybe/map (<o (partial-2 * sign) cast) (parse-nat' cs))))))

(defun parse-nat [s] (parse-nat' (string/bytes s)))
(defun parse-nat' [cs]
  (defun parse-nat'' [[c cs]] :of (Fun [[Nat8 (Iter Nat8)]] (Maybe Nat))
    (maybe/bindr (parse-digit c)
                 (fun [x]
                   (match (next cs)
                     (case None (Some (cast x)))
                     (case (Some nx)
                           (maybe/map (fun [y] (+ (cast x) (* (cast 10) y)))
                                      (parse-nat'' nx)))))))
  (maybe/bindl parse-nat'' (next (reverse cs))))

(defun digit? [c] (and (>= c ascii-0) (<= c ascii-9)))

(defun parse-digit [c] (if (digit? c) (Some (- c ascii-0)) None))

(defun parse-binary [s] :of (forall (a) (where (Cast Int a)
                                               (Cast Nat a)
                                               (Bitwise a))
                                    (Fun [Str] a))
  (foldl (fun [acc [i b]] (bit-or acc (cast (shift-l (cast (- b ascii-0)) i))))
         (cast 0)
         (enumerate (string/bytes-rev s))))

(defun string/prefix? [(Str as) (Str bs)]
  (array/= as (array/slice-to (cast (array/length as)) bs)))

(defun string/find-byte-by [p (Str bs)]
  (array/find-by p bs))

(defun string/concat [ss]
  (Str (array/concat (map string/as-array ss))))
(defun string/concat-list [ss]
  (string/concat (list/iter ss)))

(defun string/as-array [(Str a)] a)

(defun trim [s] (trim-end (trim-start s)))

(defun trim-start [s]
  ;; In this match somewhere
  (match (array/find-by (<o not whitespace-byte?) (string/as-array s))
    (case (Some i) (cadr (unwrap! (string/split-at-byte i s))))
    (case None "")))

(defun trim-end [s]
  (match (array/find-by-end (<o not whitespace-byte?) (string/as-array s))
    (case (Some i) (car (unwrap! (string/split-at-byte i s))))
    (case None "")))

(defun string/singleton-byte [b] (Str (array/singleton b)))

(extern str_cmp (Fun [Str Str] Cmp))
(defvar str-cmp str_cmp)
(extern str_show (Fun [Str] Str))
(defvar str-show str_show)

(defun string/nth-byte! [i (Str a)] (array/lookup! i a))
