(import std)
(import list)
(import maybe)

(data (Iter a)
  (Iter (Fun Unit (Maybe [a (Iter a)]))))

(define iter/nil
  (Iter (fun (_) None)))

(define (iter/once x)
  (iter/cons x iter/nil))

(define (iter/cons x xs)
  (Iter (fun (_) (Some [x xs]))))

(define (iter/chain xs ys)
  (Iter (fun (_) (maybe (next ys)
                        (fun ([x xs'])
                          (Some [x (iter/chain xs' ys)]))
                        (next xs)))))

(define (next (Iter it)) (it Unit))
(define next! (<o unwrap! next))

(define (iter/nth n)
  (<o (maybe/map car) (<o next (skip n))))

(define: (xrange a b) (Fun Int Int (Iter Int))
  (take (- b a)       (range-from a)))
(define: (range  a b) (Fun Int Int (Iter Int))
  (take (inc (- b a)) (range-from a)))

(define (range-from a)
  (Iter (fun (_) (Some [a (range-from (inc a))]))))

(define (take n xs)
  (Iter (if (> n 0)
            (fun (_) (maybe/map (map-cadr (take (- n 1))) (next xs)))
          (fun (_) None))))

(define: (skip n xs)
    (forall (a) (Fun Nat (Iter a) (Iter a)))
  (if (= n (cast 0))
      xs
    (match (next xs)
      (case None iter/nil)
      (case (Some [_ xs]) (skip (dec n) xs)))))

(define (skip-while pred xs)
  (letrec ((skip-while' (fun (xs)
                          (match (next xs)
                            (case (Some [x xs'])
                                  (if (pred x)
                                      (skip-while' xs')
                                    (Some [x xs'])))
                            (case None None)))))
    (Iter (fun (_) (skip-while' xs)))))

(define (take-while pred xs)
  (Iter (fun (Unit) (maybe/bind (fun ([x xs'])
                                  (if (pred x)
                                      (Some [x (take-while pred xs')])
                                    None))
                                (next xs)))))

(define (for xs f) (foldl (const f) Unit xs))

(define (map f xs)
  (Iter (fun (_) (maybe/map (map-two f (map f)) (next xs)))))

(define (filter pred xs)
  (Iter (fun (_) (maybe/map (map-cadr (filter pred))
                            (next (skip-while (<o not pred) xs))))))

(define: (foldl f acc xs)
    (forall (acc x) (Fun (Fun acc x acc) acc (Iter x) acc))
  (define (foldl' [acc xs])
    (match (next xs)
      (case (Some [x xs'])
            (foldl' [(f acc x) xs']))
      (case None
            acc)))
  (foldl' [acc xs]))

(define (reverse xs)
  (define (rev xs a)
    (maybe a (fun ([x xs']) (rev xs' (iter/cons x a))) (next xs)))
  (rev xs iter/nil))

(define (iter/length xs)
  (foldl (<o const inc) 0 xs))

(define enumerate (zip (range-from (: (cast 0) Nat))))

(define (zip xs ys)
  (Iter (fun (_) (maybe/map2 (fun ([x xs'] [y ys'])
                               [[x y] (zip xs' ys')])
                             (next xs) (next ys)))))
