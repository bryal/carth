(import std)
(import list)
(import maybe)

(data (Iter a)
  (Iter (Fun Unit (Maybe (Pair a (Iter a))))))

(define (next (Iter it)) (it Unit))
(define (next! it) (unwrap! (next it)))

(define (xrange a b) (take (-i b a)       (range-from a)))
(define (range  a b) (take (inc (-i b a)) (range-from a)))

(define (range-from a)
  (Iter (fun (_) (Some (Pair a (range-from (inc a)))))))

(define (take n xs)
  (Iter (if (>i n 0)
            (fun (_) (map-maybe (map-snd (take (-i n 1))) (next xs)))
          (fun (_) None))))

(define (skip-while pred xs)
  (let ((skip-while' (fun (xs)
                       (match (next xs)
                         (case (Some (Pair x xs'))
                               (if (pred x)
                                   (skip-while' xs')
                                 (Some (Pair x xs'))))
                         (case None None)))))
    (Iter (fun (_) (skip-while' xs)))))

(define (for xs f) (foldl (const f) Unit xs))

(define (map f xs)
  (Iter (fun (_) (map-maybe (map-both f (map f)) (next xs)))))

(define (filter pred xs)
  (Iter (fun (_) (map-maybe (map-snd (filter pred))
                            (next (skip-while (<o not pred) xs))))))

(define: (foldl f acc xs)
    (forall (acc x) (Fun (Fun acc x acc) acc (Iter x) acc))
  (let ((foldl' (fun ((Pair acc xs))
                  (match (next xs)
                    (case (Some (Pair x xs'))
                          (foldl' (Pair (f acc x) xs')))
                    (case None
                          acc)))))
    (foldl' (Pair acc xs))))
