(import macros)
(import maybe)

;; TODO: Iter could include a lazy length field. By default, it's a lazy computation
;;       counting the number of nodes in the list, but if you know the length ahead of
;;       time, like when creating an iterator for an array, the iterator could be
;;       constructed with a constructor function that initializes the length to a non-lazy
;;       constant.
(data (Iter a)
  (Iter (Fun Unit (Maybe [a (Iter a)]))))

(defvar iter/nil
  (Iter (fun [_] None)))

(defun iter/nil? [it]
  (none? (next it)))

(defun iter/once [x]
  (iter/cons x iter/nil))

(defun iter/cons [x xs]
  (Iter (fun [_] (Some [x xs]))))

(defun iter/chain [xs ys]
  (Iter (fun [Unit]
          (match (next xs)
            (case None (next ys))
            (case (Some [x xs'])
                  (Some [x (iter/chain xs' ys)]))))))

(defun next [(Iter it)] (it Unit))
(defvar next! (<o unwrap! next))

(defun iter/first [it] (maybe/map car (next it)))
(defun iter/first! [it] (car (next! it)))

(defun iter/last [xs] :of (forall (a) (Fun (Iter a) (Maybe a)))
  (maybe/map (fun [[x xs']] (unwrap-or x (iter/last xs'))) (next xs)))
(defun iter/last! [it] (unwrap! (iter/last it)))

(defun iter/nth [n xs] :of (forall (a) (Fun Nat (Iter a) (Maybe a)))
  (maybe/map car (next (skip n xs))))

(defun xrange [a b]
  (take (- b a) (range-from a)))
(defun range  [a b]
  (take (inc (- b a)) (range-from a)))

(defun range-from [a]
  (Iter (fun [_] (Some [a (range-from (inc a))]))))

(defun take [n xs]
  (Iter (if (> n (cast 0))
            (fun [_] (maybe/map (partial-2 map-cadr (partial-2 take (- n (cast 1)))) (next xs)))
          (fun [_] None))))

(defun skip [n xs]
  (if (= n (cast 0))
      xs
    (match (next xs)
      (case None iter/nil)
      (case (Some [_ xs]) (skip (dec n) xs)))))

(defun skip-while [pred xs]
  (letrec ((skip-while' (fun [xs]
                          (match (next xs)
                            (case (Some [x xs'])
                                  (if (pred x)
                                      (skip-while' xs')
                                    (Some [x xs'])))
                            (case None None)))))
    (Iter (fun [_] (skip-while' xs)))))

(defun take-while [pred xs]
  (Iter (fun [Unit] (maybe/bind (fun [[x xs']]
                                  (if (pred x)
                                      (Some [x (take-while pred xs')])
                                    None))
                                (next xs)))))

(defun for [xs f] (foldl (fun [_ x] (f x)) Unit xs))

(defun map [f xs]
  (Iter (fun [Unit] (match (next xs)
                      (case None None)
                      (case (Some [x xs]) (Some [(f x) (map f xs)]))))))

(defun filter [pred xs]
  (Iter (fun [_] (maybe/map (partial-2 map-cadr (partial-2 filter pred))
                            (next (skip-while (<o not pred) xs))))))

(defun flat-map [f xs] :of (forall (a b) (Fun (Fun a (Iter b)) (Iter a) (Iter b)))
  (defun go [xs]
    (match (next xs)
      (case None None)
      (case (Some [x xs])
            (let1 ys (f x)
              (match (next ys)
                (case None (go xs))
                (case (Some [y ys]) (Some [y (iter/chain ys (flat-map f xs))])))))))
  (Iter (fun [Unit] (go xs))))

(defun iter/join [xss] :of (forall (a) (Fun (Iter (Iter a)) (Iter a)))
  (Iter (fun [Unit] (maybe/bind (fun [[xs xss']] (next (iter/chain xs (iter/join xss'))))
                                (next xss)))))

(defun filter-map [f xs]
  (flat-map (<o maybe/iter f) xs))

(defun foldl [f acc xs] :of (forall (acc x) (Fun (Fun acc x acc) acc (Iter x) acc))
  (defun foldl' [acc xs]
    (match (next xs)
      (case (Some [x xs'])
            (foldl' (f acc x) xs'))
      (case None
            acc)))
  (foldl' acc xs))

(defun unfoldr [f a] :of (forall (a b) (Fun (Fun a (Maybe [b a]))
                                            a
                                            (Iter b)))
  (Iter (fun [_] (maybe/map (partial-2 map-cadr (partial-2 unfoldr f)) (f a)))))

(defun unfoldr' [f inp] :of (forall (inp x) (Fun (Fun inp (Maybe [x inp]))
                                                 inp
                                                 [(List x) inp]))
  (defun go [xs inp]
    (match (f inp)
      (case None [(list/reverse xs) inp])
      (case (Some [x inp]) (go (list/cons x xs) inp))))
  (go LNil inp))

(defun reverse [xs]
  (defun rev [xs a]
    (maybe' a (fun [[x xs']] (rev xs' (iter/cons x a))) (next xs)))
  (rev xs iter/nil))

(defun count [xs] :of (forall (a) (Fun (Iter a) Nat))
  (foldl (fun [n _] (inc n)) (cast 0) xs))

(defvar enumerate (partial-2 zip (range-from (: (cast 0) Nat))))

(defun zip [xs ys]
  (Iter (fun [_] (match [(next xs) (next ys)]
                   (case [(Some [x xs']) (Some [y ys'])] (Some [[x y] (zip xs' ys')]))
                   (case _ None)))))

(defun zip-with [f xs ys]
  (Iter (fun [_] (match [(next xs) (next ys)]
                   (case [(Some [x xs]) (Some [y ys])] (Some [(f x y) (zip-with f xs ys)]))
                   (case _ None)))))

(defun ands [xs] (foldl and True xs))
(defun all [f xs] (ands (map f xs)))
(defun any [f xs]
  (not (iter/nil? (filter f xs))))

(defun iter/cartesian [xs ys]
  (flat-map (fun [x] (map (fun [y] [x y]) ys)) xs))

(defun repeat [x]
  (Iter (fun [Unit] (Some [x (repeat x)]))))

(defun intersperse [x ys]
  (iter/chain (take 1 ys) (precalate x (skip (to-nat 1) ys))))

(defun precalate [x ys]
  (flat-map (fun [y] (iter/cons x (iter/once y))) ys))

(defun intercalate [x ys]
  (iter/join (intersperse x ys)))

(defun skip-every-nth [n it]
  (defun go [m it]
    (Iter (nonstrict (if (= m n)
                         (next (go 0 (skip (to-nat 1) it)))
                       (maybe/map (partial-2 map-cadr (partial-2 go (+ 1 m))) (next it))))))
  (go 0 it))

;; Sliding windows over an iterator, each of width `n`
(defun iter/windows [n it] :of (forall (a) (Fun Nat (Iter a) (Iter (Array a))))
  (unfoldr (fun [xs]
             (let1 window (array/collect (take n xs))
               (if (< (array/length window) n)  ; At the end
                   None
                 (Some [window (skip 1 xs)]))))
           it))

(defun iter/next-n [n it] :of (forall (a) (Fun Nat (Iter a) (Maybe [(Array a) (Iter a)])))
  (defun go [a i it]
    (if (= i n)
        (Some [a it])
      (match (next it)
        (case (Some [x it']) (go (array/mutate i x a) (+ i (to-nat 1)) it'))
        (case None           None))))
  (go (array/unsafe-uninit n) (to-nat 0) it))

(defun iter/chunks [width it] :of (forall (a) (Fun Nat (Iter a) (Iter (Array a))))
  (unfoldr (partial-2 iter/next-n width) it))

(defun maximum [xs] (apply3 foldl [max . (next! xs)]))
(defun minimum [xs] (apply3 foldl [min . (next! xs)]))

(defun iter/find [pred xs]
  (match (next xs)
    (case (Some [x xs']) (if (pred x) (Some x) (iter/find pred xs')))
    (case None None)))

(defun unzip [it]
  (map-two list/reverse list/reverse
           (foldl (fun [[xs ys] [x y]] [(list/cons x xs) (list/cons y ys)])
                  [LNil LNil]
                  it)))
