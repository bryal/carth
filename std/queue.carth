(import list)

;; FIFO (First In, First Out) queue
(data (Queue a)
  (Queue (List a) (List a)))

(defvar queue/empty
  (Queue LNil LNil))

(defun queue/push [x (Queue in out)]
  (Queue (list/cons x in) out))

(defun queue/pop
  (case [(Queue LNil LNil)]
        None)
  (case [(Queue in LNil)]
        (let1 [x out] (unwrap! (list/uncons (list/reverse in)))
          (Some [(Queue LNil out) x])))
  (case [(Queue in (LCons (Box [x out'])))]
        (Some [(Queue in out') x])))
