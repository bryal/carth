(defmacro apps ()
  (case (op x) x)
  (case (op x1 x2 xs ...) (apps op (op x1 x2) xs ...)))

(defmacro appsr ()
  (case (op x) x)
  (case (op x xs ...) (op x (appsr op xs ...))))

(defmacro list ()
  (case (xs ...) (appsr list/cons xs ... Nil)))

(defmacro +s () (case (xs ...) (apps + xs ...)))
(defmacro =s ()
  (case (x xs ...) (all (= x) (list/iter (list xs ...)))))

(defmacro io/wrap ()
  (case (computation) (IO (fun (real-world) [computation real-world]))))

(defmacro lazy ()
  (case (computation) (Lazy [(unsafe-perform-io mutex/new)
                             (box (Left (fun (Unit) computation)))])))

(defmacro nonstrict ()
  (case (computation) (fun (Unit) computation)))

(defmacro do (<-)
  (case (do-bind ma) ma)
  (case (do-bind (<- a ma) mbs ...)
        (do-bind (fun (a) (do do-bind mbs ...)) ma))
  (case (do-bind (let1 x a) mbs ...)
        (let1 x a (do do-bind mbs ...)))
  (case (do-bind (let bs) mbs ...)
        (let bs (do do-bind mbs ...)))
  (case (do-bind ma mbs ...)
        (do-bind (fun (_) (do do-bind mbs ...)) ma)))
