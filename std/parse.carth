(import std)

(data ParseInp (ParseInp Str))

(data ParseErr (ParseErr ParseInp Str))

(data (Parser a)
  (Parser (Fun [ParseInp] (Either ParseErr [ParseInp a]))))

(defun parse! [(Parser p) input] :of (forall (a) (Fun [(Parser a) Str] a))
  (match (p (ParseInp input))
    (case (Left (ParseErr (ParseInp remaining) msg))
          (panic (str-append "parse!:\n" (parse/format-error input remaining msg))))
    (case (Right [_ x]) x)))

(defun parse [(Parser p) input] :of (forall (a) (Fun [(Parser a) Str] (Either ParseErr a)))
  (either/map cadr (p (ParseInp input))))

(defun parse/format-error [input remaining msg]
  (let1 i (- (string/length-bytes input) (string/length-bytes remaining))
    (string/concat-list
     (list msg "\n"
           "at i = " (show-nat i) "\n"
           "--------------------\n"
           (string/substr-to 30 remaining)
           "\n"))))

(defun parse/between [left right middle] :of (forall (a b c) (Fun [(Parser a) (Parser b) (Parser c)] (Parser c)))
  (parse/thenr left (parse/thenl middle right)))

;; The return-string is the equivalent slice in the input string of the given
;; literal. Might be good for reducing memory usage?
(defun parse/string [lit]
  (Parser (fun [(ParseInp inp)]
            (if (string/prefix? lit inp)
                (let1 n (string/length-bytes lit)
                  (Right [(ParseInp (string/substr-from (to-int n) inp))
                          (string/substr-to (to-int n) inp)]))
              (Left (ParseErr (ParseInp inp) (str-append "Failed to match literally " (str-show lit))))))))

(defvar parse/take-rest
  (Parser (fun [(ParseInp inp)] (Right [(ParseInp "") inp]))))

(defun parse/take-bytes-while [f]
  (Parser (fun [(ParseInp inp)]
            (Right (map-car ParseInp
                            (match (string/find-byte-by (<o not f) inp)
                              (case None ["" inp])
                              (case (Some i) (swap (unwrap! (string/split-at-byte i inp))))))))))

(defun parse/take-bytes-while1 [f]
  (Parser (fun [inp]
            (let1 (Parser p) (parse/take-bytes-while f)
              (either/bind (fun (case [[_ ""]] (Left (ParseErr inp "Expected at least one byte to match predicate")))
                             (case [res] (Right res)))
                           (p inp))))))

(defun parse/take-codepoints-while [f]
  (defun go [s]
    (match (string/split-first-codepoint s)
      (case None s)
      (case (Some [c s']) (if (f c)
                              (go s')
                            s))))
  (Parser (fun [(ParseInp inp)]
            (let1 i (- (string/length-bytes inp) (string/length-bytes (go inp)))
              (Right (map-car ParseInp (swap (unwrap! (string/split-at-byte i inp)))))))))

(defun parse/take-bytes [n]
  (Parser (fun [(ParseInp inp)]
            (match (string/split-at-byte n inp)
              (case None (Left (ParseErr (ParseInp inp) (apps str-append "Tried to take " (show-nat n) " bytes, but fewer remaining."))))
              (case (Some [s rest]) (Right [(ParseInp rest) s]))))))

(defun parse/thenr [(Parser pa) (Parser pb)] :of (forall (a b) (Fun [(Parser a) (Parser b)] (Parser b)))
  (Parser (fun [inp] (either/bindr (pa inp) (fun [[inp _a]] (pb inp))))))

(defun parse/thenl [(Parser pa) (Parser pb)] :of (forall (a b) (Fun [(Parser a) (Parser b)] (Parser a)))
  (Parser (fun [inp]
            (do either/bind
                (<- [inp a] (pa inp))
                (<- [inp _b] (pb inp))
                (Right [inp a])))))

(defvar parse/bindr
  (flip parse/bind))

(defun parse/bind [f (Parser pa)] :of (forall (a b) (Fun [(Fun [a] (Parser b)) (Parser a)] (Parser b)))
  (Parser (fun [inp] (either/bind (fun [[inp a]] (let1 (Parser pb) (f a) (pb inp))) (pa inp)))))

(defun parse/lift2 [f pa pb]
  (parse/bindr pa (fun [a] (parse/map \(f a #) pb))))

(defun parse/binary-digit? [b]
  (or (= b ascii-0) (= b ascii-1)))

(defun parse/map [f (Parser pa)]
  (Parser (fun [inp] (either/map (partial-2 map-cadr f) (pa inp)))))

(defun parse/pure [x] :of (forall (a) (Fun [a] (Parser a)))
  (Parser (fun [inp] (Right [inp x]))))

(defvar parse/nat :of (Parser Nat)
  (parse/map (fun [s] (unwrap-or-else (fun [_] (panic (str-append "parse/nat: digits not a nat, " (str-show s)))) (parse-nat s)))
             (parse/take-bytes-while1 digit?)))

(defvar parse/int :of (Parser Int)
  (parse/or (parse/map (<o neg to-int) (parse/thenr (parse/string "-") parse/nat))
            (parse/map to-int parse/nat)))

;; TODO: If both fail, pick the error of the longest partial match
(defun parse/or [(Parser pa) (Parser pb)] :of (forall (a) (Fun [(Parser a) (Parser a)] (Parser a)))
  (Parser (fun [inp] (match (pa inp)
                       (case (Right res) (Right res))
                       (case (Left (ParseErr (ParseInp rem1) msg1))
                             (match (pb inp)
                               (case (Right res) (Right res))
                               (case (Left (ParseErr (ParseInp rem2) msg2))
                                     (let (((ParseInp inp) inp)
                                           (lin (string/length-bytes inp))
                                           (l1 (- lin  (string/length-bytes rem1)))
                                           (l2 (- lin  (string/length-bytes rem2))))
                                       (Left (if (> l2 l1)
                                                 (ParseErr (ParseInp rem1) msg1)
                                               (ParseErr (ParseInp rem2) msg2)))))))))))

(defun parse/n-times [n pa]
  (foldl (fun [pacc i] (do parse/bind
                           (<- acc pacc)
                           (<- a pa)
                           (parse/pure (array/mutate (to-nat i) a acc))))
         (parse/pure (array/unsafe-uninit n))
         (xrange 0 (to-int n))))

(defvar parse/space (parse/map (const Unit) (parse/take-bytes-while whitespace-byte?)))
(defvar parse/space1 (parse/map (const Unit) (parse/take-bytes-while1 whitespace-byte?)))

(defun parse/many [(Parser pa)]
  (Parser (fun [inp] (Right (swap (unfoldr' (apps <o (partial-2 maybe/map swap) right-to-maybe pa) inp))))))

(defun parse/sep-by1 [psep pa]
  (do parse/bind
      (<- a pa)
      (<- as (parse/many (parse/thenr psep pa)))
      (parse/pure (list/cons a as))))

;; TODO: Allow recursive definitions not just for direct functions, but for all expressions with the
;;       recursion gated behind a function/lambda of some sort. I'm thinking of recursive parsers,
;;       specifically.
;;
;;       Consider the following definition. At the moment, we have to juggle with the Parser
;;       wrapper, just to get the recursion allowed by the compiler.
;;
;; (define parse-snailfish-num
;;   (define (p-snailfish-num inp)
;;     (let1 (Parser p)
;;         (parse/or (parse/map SfRegular parse/int)
;;                   (parse/between (parse/string "[")
;;                                  (parse/string "]")
;;                                  (do parse/bind
;;                                      (<- a (Parser p-snailfish-num))
;;                                      (parse/string ",")
;;                                      (<- b (Parser p-snailfish-num))
;;                                      (parse/pure (SfPair (box [a b]))))))
;;       (p inp)))
;;   (parse! (Parser p-snailfish-num)))
