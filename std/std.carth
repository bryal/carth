(define (fst (Pair a _)) a)
(define (snd (Pair _ b)) b)

(define: (undefined x)
    (forall (a) (Fun Unit a))
  (panic "undefined"))

(extern -panic (Fun Str Unit))
(define (panic msg)
  (seq (-panic msg) (undefined Unit)))

(type (Maybe a)
  None
  (Some a))

(define unwrap!
  (fun-match (case (Some x) x)
             (case None (panic "unwrap! of None"))))

(type (Lazy a)
  (Lazy (Fun Unit a)))

(define lively
  (fun-match (case (Lazy f) (f Unit))))

;;; Math

(extern rem-int (Fun (Pair Int Int) Int))
(define (rem a b)
  (rem-int (Pair a b)))

(extern add-int (Fun (Pair Int Int) Int))
(define (+ a b)
  (add-int (Pair a b)))

(extern sub-int (Fun (Pair Int Int) Int))
(define (- a b)
  (sub-int (Pair a b)))

(extern mul-int (Fun (Pair Int Int) Int))
(define (* a b)
  (mul-int (Pair a b)))

(extern div-int (Fun (Pair Int Int) Int))
(define (/ a b)
  (div-int (Pair a b)))

(extern eq-int (Fun (Pair Int Int) Bool))
(define (= a b)
  (eq-int (Pair a b)))

(extern gt-int (Fun (Pair Int Int) Bool))
(define (> a b)
  (gt-int (Pair a b)))

(define (>= a b)
  (or (> a b) (= a b)))

(define (and p q)
  (if p q False))
(define (or p q)
  (if p True q))

(define (divisible? n m)
  (= (rem n m) 0))

;;; Strings

(extern show-int (Fun Int Str))

(extern -str-append (Fun (Pair Str Str) Str))
(define (str-append s1 s2)
  (-str-append (Pair s1 s2)))

;;; IO

(extern display-inline (Fun Str Unit))

(define (display s)
  (display-inline (str-append s "\n")))

;;; Function

(define (seq a b)
  b)

(define (comp f g a)
  (f (g a)))

;;; Iter

(type (Iter a)
  (Iter (Lazy (Maybe (Pair a (Iter a))))))

(define (next (Iter it)) (lively it))
(define (next! it) (unwrap! (next it)))

(define (range a b)
  (Iter (Lazy (if (> a b)
                  (fun _ None)
                (fun _ (Some (Pair a (range (+ a 1) b))))))))

(define (for xs f)
  (match (next xs)
    (case None Unit)
    (case (Some (Pair x xs'))
          (seq (f x) (for xs' f)))))

;;; List

(type (List a)
  (Cons (Box (Pair a (List a))))
  Nil)

(define first
  (fun-match
    (case (Cons (Box (Pair x _))) (Some x))
    (case Nil None)))
(define first!
  (fun-match
    (case (Cons (Box (Pair x _))) x)
    (case Nil (panic "first! of empty list"))))

(define rest
  (fun-match
    (case (Cons (Box (Pair _ xs))) (Some xs))
    (case Nil None)))
(define rest!
  (fun-match
    (case (Cons (Box (Pair _ xs))) xs)
    (case Nil (panic "rest! of empty list"))))

(define last
  (fun-match
    (case (Cons (Box (Pair x Nil))) (Some x))
    (case (Cons (Box (Pair _ xs))) (last xs))
    (case Nil None)))
(define last!
  (fun-match
    (case (Cons (Box (Pair x Nil))) x)
    (case (Cons (Box (Pair _ xs))) (last! xs))
    (case Nil (panic "last! of empty list"))))

(define init
  (fun-match
    (case Nil None)
    (case xs (Some (init! xs)))))
(define init!
  (fun-match
    (case (Cons (Box (Pair _ Nil))) Nil)
    (case (Cons (Box (Pair x xs))) (cons x (init! xs)))
    (case Nil (panic "init! of empty list"))))

(define (cons x xs)
  (Cons (box (Pair x xs))))

(define (list1 x)
  (cons x Nil))
(define (list2 x0 x1)
  (cons x0 (list1 x1)))
(define (list3 x0 x1 x2)
  (cons x0 (list2 x1 x2)))
(define (list4 x0 x1 x2 x3)
  (cons x0 (list3 x1 x2 x3)))
(define (list5 x0 x1 x2 x3 x4)
  (cons x0 (list4 x1 x2 x3 x4)))
(define (list6 x0 x1 x2 x3 x4 x5)
  (cons x0 (list5 x1 x2 x3 x4 x5)))

(define: (foldl f acc xs)
    (forall (a b) (Fun (Fun b a b) b (List a) b))
  (match xs
    (case (Cons (Box (Pair x xs'))) (foldl f (f acc x) xs'))
    (case Nil acc)))

(type Void)

(define: void-elim
    (forall (a) (Fun Void a))
  (fun-match))
