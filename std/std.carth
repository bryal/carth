(import nonstrict)
(import iter)
(import list)
(import maybe)

(define (fst (Pair a _)) a)
(define (snd (Pair _ b)) b)

(define: (undefined x)
    (forall (a) (Fun Unit a))
  (panic "undefined"))

(extern -panic (Fun Str Unit))
(define (panic msg)
  (seq (-panic msg) (undefined Unit)))

;;; Math

(extern rem-int (Fun (Pair Int Int) Int))
(define (rem a b)
  (rem-int (Pair a b)))

(extern add-int (Fun (Pair Int Int) Int))
(define (+ a b)
  (add-int (Pair a b)))

(extern sub-int (Fun (Pair Int Int) Int))
(define (- a b)
  (sub-int (Pair a b)))

(extern mul-int (Fun (Pair Int Int) Int))
(define (* a b)
  (mul-int (Pair a b)))

(extern div-int (Fun (Pair Int Int) Int))
(define (/ a b)
  (div-int (Pair a b)))

(extern eq-int (Fun (Pair Int Int) Bool))
(define (= a b)
  (eq-int (Pair a b)))

(extern gt-int (Fun (Pair Int Int) Bool))
(define (> a b)
  (gt-int (Pair a b)))

(define (>= a b)
  (or (> a b) (= a b)))

(define (and p q)
  (if p q False))
(define (or p q)
  (if p True q))

(define (divisible? n m)
  (= (rem n m) 0))

;;; Strings

(extern show-int (Fun Int Str))

(extern -str-append (Fun (Pair Str Str) Str))
(define (str-append s1 s2)
  (-str-append (Pair s1 s2)))

;;; IO

(extern display-inline (Fun Str Unit))

(define (display s)
  (display-inline (str-append s "\n")))

;;; Function

(define (const a b) a)
(define (seq   a b) b)

(define (<o f g a) (f (g a)))
(define (o> f g a) (g (f a)))

(type Void)

(define: void-elim
    (forall (a) (Fun Void a))
  (fmatch))
