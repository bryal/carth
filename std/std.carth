(import iter)
(import list)
(import maybe)
(import either)
(import math)
(import memo)
(import mem)
(import array)
(import string)
(import queue)
(import io)

(define (car      [x . _])           x)
(define (cadr     [_ x . _])         x)
(define (caddr    [_ _ x . _])       x)
(define (cadddr   [_ _ _ x . _])     x)
(define (caddddr  [_ _ _ _ x . _])   x)

(define (cdr      [_ . x])           x)
(define (cddr     [_ _ . x])         x)
(define (cdddr    [_ _ _ . x])       x)
(define (cddddr   [_ _ _ _ . x])     x)
(define (cdddddr  [_ _ _ _ _ . x])   x)

(define (map-car     f [a . b]) [(f a) . b])
(define (map-cadr    f [a . b]) [a . (map-car f b)])
(define (map-caddr   f [a . b]) [a . (map-cadr f b)])
(define (map-cadddr  f [a . b]) [a . (map-caddr f b)])
(define (map-caddddr f [a . b]) [a . (map-cadddr f b)])

(define (map-cdr     f [a . b]) [a . (f b)])
(define (map-cddr    f [a . b]) [a . (map-cdr f b)])
(define (map-cdddr   f [a . b]) [a . (map-cddr f b)])
(define (map-cddddr  f [a . b]) [a . (map-cdddr f b)])
(define (map-cdddddr f [a . b]) [a . (map-cddddr f b)])

(define (map-cons f g [a . b]) [(f a) . (g b)])

(define (map-two f g [a b]) [(f a) (g b)])
(define (map-three f g h [a b c]) [(f a) (g b) (h c)])

(define: (undefined x)
    (forall (a) (Fun Unit a))
  (panic "undefined"))

(extern -panic (Fun Str Unit))
(define (panic msg)
  (seq (-panic msg) (undefined Unit)))

(data Cmp
  Lt Eq Gt)

(define (int/cmp a b)
  (if (< a b) Lt
    (if (= a b) Eq
      Gt)))

;;; Strings

(extern show-int (Fun Int Str))
(extern show-nat (Fun Nat Str))
(extern show-f64 (Fun F64 Str))

(extern str-append (Fun Str Str Str))

;;; IO

(extern unsafe-display-inline (Fun Str Unit))

(define: (display-inline s real-world)
    (Fun Str RealWorld [Unit RealWorld])
  [(unsafe-display-inline s) real-world])

(define (display s)
  (display-inline (str-append s "\n")))

;;; Function

(define (uncurry f [a b]) (f a b))
(define (curry f a b) (f [a b]))

(define (<| f a) (f a))
(define (|> a f) (f a))

(define (const a b) a)
(define (seq   a b) b)

(define (<o f g a) (f (g a)))
(define (<oo f g a b) (f (g a b)))
(define (<ooo f g a b c) (f (g a b c)))
(define (o> f g a) (g (f a)))
(define (oo> f g a b) (g (f a b)))
(define (ooo> f g a b c) (g (f a b c)))

(define (flip f a b) (f b a))

(data Void)

(define: void-elim
    (forall (a) (Fun Void a))
  (fmatch))
