(import iter)
(import list)
(import maybe)
(import either)
(import math)
(import memo)
(import mem)

(define (car (Pair a _)) a)
(define (cdr (Pair _ b)) b)

(define (map-car f (Pair a b)) (Pair (f a) b))
(define (map-cdr f (Pair a b)) (Pair a (f b)))
(define (map-both f g (Pair a b)) (Pair (f a) (g b)))

(define: (undefined x)
    (forall (a) (Fun Unit a))
  (panic "undefined"))

(extern -panic (Fun Str Unit))
(define (panic msg)
  (seq (-panic msg) (undefined Unit)))

;;; Strings

(extern show-int (Fun Int Str))
(extern show-f64 (Fun F64 Str))

(extern str-append (Fun Str Str Str))

;;; IO

(extern display-inline (Fun Str Unit))

(define (display s)
  (display-inline (str-append s "\n")))

;;; Function

(define (const a b) a)
(define (seq   a b) b)

(define (<o f g a) (f (g a)))
(define (<oo f g a b) (f (g a b)))
(define (<ooo f g a b c) (f (g a b c)))
(define (o> f g a) (g (f a)))
(define (oo> f g a b) (g (f a b)))
(define (ooo> f g a b c) (g (f a b c)))

(define (flip f a b) (f b a))

(data Void)

(define: void-elim
    (forall (a) (Fun Void a))
  (fmatch))
