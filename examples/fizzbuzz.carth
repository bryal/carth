(type (Pair a b)
  (Pair a b))

(type (List a)
  Nil
  (Cons a (Box (List a))))

(define (start _)
  (for (Cons "foo" (box (Cons "bar" (box (Cons "baz" (box Nil))))))
       display))

(define (display s)
  (display-inline (str-append s "\n")))

(define (for xs f)
  (match xs
    [Nil unit]
    [(Cons x xs')
     (seq (f x) (for (deref xs') f))]))

(define (seq a b) b)

(define (str-append s1 s2) (-str-append (Pair s1 s2)))

(extern display-inline (Fun Str Unit))
(extern -str-append (Fun (Pair Str Str) Str))
