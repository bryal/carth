# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# This file contains a template configuration file, which is typically
# placed as .hlint.yaml in the root of your project


# Warnings currently triggered by your code
# - ignore: {name: "Use list literal pattern"}
# - ignore: {name: "Use unless"}
# - ignore: {name: "Redundant bracket"}
# - ignore: {name: "Use mapMaybe"}
# - ignore: {name: "Use list comprehension"}
# - ignore: {name: "Use <$>"}
# - ignore: {name: "Unused LANGUAGE pragma"}
- ignore: {name: "Use section"}
# - ignore: {name: "Use notElem"}
# - ignore: {name: "Use infix"}
# - ignore: {name: "Avoid lambda using `infix`"}
# - ignore: {name: "Use forM"}
# - ignore: {name: "Redundant $"}
# - ignore: {name: "Use second"}
# - ignore: {name: "Use mapAndUnzipM"}
# - ignore: {name: "Use replicateM"}
- ignore: {name: "Use &&"}
- ignore: {name: "Use camelCase"}
# - ignore: {name: "Use head"}
# - ignore: {name: "Use null"}
# - ignore: {name: "Use newtype instead of data"}
# - ignore: {name: "Use unwords"}
# - ignore: {name: "Use tuple-section"}
# - ignore: {name: "Use first"}
# - ignore: {name: "Eta reduce"}


# Specify additional command line arguments
#
# - arguments: [--color, --cpp-simple, -XQuasiQuotes]


# Control which extensions/flags/modules/functions can be used
#
# - extensions:
#   - default: false # all extension are banned by default
#   - name: [PatternGuards, ViewPatterns] # only these listed extensions can be used
#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module
#
# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere
#
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules

# Ignore some builtin hints
# - ignore: {name: Use let}
# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules
