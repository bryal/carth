;;;

;; Test case for bug fixed in 44eff82c6474
;;
;; This test case is a bit artificial and could possibly me a little simpler and cleaner,
;; but this is good enough.
;;
;; Change the Int8 in the Either to Int, and it starts working (pre-fix).
;;
;; The issue was that (Either (Fun Unit Unit)) ended up being represented by the Right
;; variant, which in the pre-fix LLVM representation resulted in implicit padding of 7
;; bytes between the Int8 and the following (Cons Int Unit). When (<o id id) was passed to
;; foo in either/map-left, LLVM for some reason decided that the 7 bytes of padding could
;; be zeroed, since it didn't think we could use them anyways. Maybe it passed the Int8 in
;; a separate register, with the higher bytes zeroed or something. Anyways, this resulted
;; in the captures pointer of the Fun in the Either having all but its least significant
;; byte zeroed, et voila, segfault!

(data (Either a)
  (Left a)
  (Right [Int8 Int]))

(defun seq [a b] :of (Fun (Either Unit) (IO Unit) (IO Unit))
  b)
(defun foo [f] :of (Fun (Fun Unit Unit) Unit)
  (f Unit))
(defun <o [f g] :of (Fun (Fun Unit Unit) (Fun Unit Unit) (Fun Unit Unit))
  (fun [a] (f (g a))))
(defun id [x] :of (Fun Unit Unit)
  x)

(defun either/map-left :of (Fun (Fun (Fun Unit Unit) Unit)
                                (Either (Fun Unit Unit))
                                (Either Unit))
  (case [f (Left a)] (Left (f a)))
  (case [_ (Right b)] (Right b)))

(defvar main
  (seq (either/map-left foo (Left (<o id id)))
       (IO (fun [real-world] [Unit real-world]))))
