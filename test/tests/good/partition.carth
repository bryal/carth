;; 3

(defmacro list ()
  (case () LNil)
  (case (list-x list-xs ...) (LCons (box [list-x (list list-xs ...)]))))

(data (List a)
  (LCons (Box [a (List a)]))
  LNil)

(data (Either a b)
  (Left a)
  (Right b))

(define main
  (let1 [xs ys] (partition (list (Left 1) (Left 3) (Right 2) (Right 4) (Left 5)))
    (display-inline (show_int (- (sum xs) (sum ys))))))

(define: partition
    (forall (a b) (Fun (List (Either a b)) [(List a) (List b)]))
  (fun* (case [LNil]  [LNil LNil])
        (case [(LCons (Box [e es]))]
              (let1 [ls rs] (partition es)
                (match e
                  (case (Left l)  [(LCons (box [l ls])) rs])
                  (case (Right r) [ls (LCons (box [r rs]))]))))))

(define: (box x)
    (forall (a) (Fun a (Box a)))
  (store x (transmute (id@"GC_malloc" (sizeof a)))))

(define (display-inline s)
  (IO (fun (real-world) [(unsafe_display_inline s) real-world])))

(extern unsafe_display_inline (Fun Str Unit))

(extern show_int (Fun Int Str))

(define sum (fun* (case [LNil] 0) (case [(LCons (Box [x xs]))] (+ x (sum xs)))))
