(import std)

(defun main [Unit]
  (let ((args (get_args Unit))
        (in-file (array/lookup! (to-nat 1) args))
        (_ (display (str-append "Compiling " in-file)))
        (out-file (query-executable in-file))
        )
    (display (str-append "Finished compiling! Resulting executable: " out-file))))

(defun query-executable [src-file]
  (let1 [obj-file link-deps] (query-object src-file)
    (link obj-file link-deps)))

(defun link [obj-file link-deps]
  (let1 [_ err _] (unwrap! (call_process "gcc" ((<oo array/collect-list list/append)
                                                (list "-fuse-ld=mold" "-o" "a.out" obj-file)
                                                (list/map \(str-append "-l" #) link-deps))))
    (seq (display (str-append "mold stderr: " (Str err)))
         "a.out")))

(defun query-object [src-file]
  (let1 c-file (query-gen-c src-file)
    [(compile c-file) (list ;; "carth_std_rs" "sigsegv" "dl" "pthread" "m" "gc" "ssl" "crypto"
                       )]))

(defun query-gen-c [src-file]
  (let1 src (read_file src-file)
    ((const "generated.c")
     (write_file "generated.c"
                 (string/concat-list (list "#include <stdio.h>\n"
                                           "int main(void) {\n"
                                           "    printf(\"%d\\n\", " (trim (unwrap! src)) ");\n"
                                           "}\n"))))))

(defun compile [c-file]
  (let1 [_ err _] (unwrap! (call_process "gcc" (array/collect-list (list "-c" "-o" "generated.o" c-file))))
    (seq (display (str-append "gcc stderr: " (Str err)))
         "generated.o")))

(defun nyi [thing]
  (panic (str-append "not yet implemented: " thing)))
